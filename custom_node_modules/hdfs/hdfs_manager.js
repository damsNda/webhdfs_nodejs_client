'use strict';
const util=require('util');
const http = require('http');
const url = require('url');
const fs = require('fs');
const config=require('config');

function findDataNodeUrl(filename,overwrite){
	return new Promise(function(resolve, reject) {
		let hdfs_config=config.get("webhdfs_host");
		let path=util.format('/webhdfs/v1/%s/%s?op=CREATE&overwrite=%s&user.name=%s',hdfs_config.path,filename,config.get("webhdfs_operation").create.overwrite,config.get("user").name);

		var options={
		hostname : hdfs_config.hostname,
		port     : hdfs_config.port,
		path     : path,
		method   : 'PUT',
		};
		http.request(options, function(response) {
			var datanodeLocation = response.headers['location'];
			resolve(datanodeLocation);
		}).end();
	});
	
}
/**
*Put file to hdfs server
*@param file = complete path to file
*@param overwrite = to overwrite file
**/
exports.putFile=function(file,overwrite){
	return new Promise(function(resolve, reject) {

		
		findDataNodeUrl(file.name,overwrite).then(function(datanodeLocation){
			let dataNodeUrl=url.parse(datanodeLocation);
			let options={
				hostname : dataNodeUrl.hostname,
				port     : dataNodeUrl.port,
				path     : dataNodeUrl.path,
				method   : 'PUT',
			};
			fs.createReadStream(file.fullPath).pipe(http.request(options, function(response, body) {
				console.log("Fin de Chargement du fichier "+file.fullPath);
			}));
		});
	});
};